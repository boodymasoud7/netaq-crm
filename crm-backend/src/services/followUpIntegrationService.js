const { SimpleReminder, FollowUp } = require('../../models');
const notificationEmitter = require('../utils/notificationEmitter');

/**
 * خدمة تكامل المتابعات مع التذكيرات والإشعارات
 * تربط بين الأنظمة الثلاثة: FollowUps, SimpleReminders, Notifications
 */
class FollowUpIntegrationService {

  /**
   * إنشاء تذكير تلقائي للمتابعة
   * يتم استدعاؤها عند إنشاء متابعة جديدة
   */
  static async createReminderForFollowUp(followUp) {
    try {
      console.log(`🔔 Creating reminder for follow-up: ${followUp.title}`);
      
      // إنشاء تذكير قبل موعد المتابعة بـ 30 دقيقة
      const reminderTime = new Date(followUp.scheduledDate);
      reminderTime.setMinutes(reminderTime.getMinutes() - 30);
      
      // لا ننشئ تذكير إذا كان الوقت في الماضي
      if (reminderTime <= new Date()) {
        console.log('⏰ Reminder time is in the past, skipping reminder creation');
        return null;
      }
      
      const reminderNote = `📋 متابعة مستحقة: ${followUp.title}\n` +
                          `📅 الموعد: ${followUp.scheduledDate.toLocaleString('ar-EG')}\n` +
                          `📞 النوع: ${this.getFollowUpTypeArabic(followUp.type)}\n` +
                          `⚡ الأولوية: ${this.getPriorityArabic(followUp.priority)}`;
      
      const reminder = await SimpleReminder.create({
        user_id: followUp.assignedTo,
        note: reminderNote,
        remind_at: reminderTime,
        status: 'pending',
        // ربط التذكير بالعميل أو العميل المحتمل حسب المتوفر
        client_id: followUp.clientId || null,
        lead_id: followUp.leadId || null,
        type: 'follow_up',
        description: `متابعة رقم ${followUp.id}: ${followUp.title}`
      });
      
      console.log(`✅ Reminder created for follow-up ${followUp.id}: ${reminder.id}`);
      
      // إرسال إشعار فوري بإنشاء المتابعة
      await this.notifyFollowUpCreated(followUp);
      
      return reminder;
      
    } catch (error) {
      console.error(`❌ Error creating reminder for follow-up ${followUp.id}:`, error);
      // لا نوقف العملية إذا فشل إنشاء التذكير
      return null;
    }
  }
  
  /**
   * إرسال إشعار عند إنشاء متابعة جديدة
   */
  static async notifyFollowUpCreated(followUp) {
    try {
      // إشعار الموظف المخصص له المتابعة
      const employeeNotification = {
        type: 'followUpAssigned',
        title: '📋 متابعة جديدة مخصصة لك',
        message: `تم تخصيص متابعة جديدة: ${followUp.title}`,
        employeeId: followUp.assignedTo,
        followUpId: followUp.id,
        scheduledDate: followUp.scheduledDate,
        priority: followUp.priority,
        followUpType: followUp.type
      };
      
      notificationEmitter.emit('followUpAssigned', employeeNotification);
      
      // إشعار المدراء بالمتابعة الجديدة
      const managerNotification = {
        type: 'newFollowUpCreated',
        title: '📋 متابعة جديدة في النظام',
        message: `تم إنشاء متابعة جديدة: ${followUp.title}`,
        followUpId: followUp.id,
        assignedTo: followUp.assignedTo,
        scheduledDate: followUp.scheduledDate,
        priority: followUp.priority,
        isAutoGenerated: followUp.isAutoGenerated
      };
      
      notificationEmitter.emit('managerNotification', managerNotification);
      
      console.log(`📤 Notifications sent for follow-up creation: ${followUp.id}`);
      
    } catch (error) {
      console.error(`❌ Error sending follow-up creation notifications:`, error);
    }
  }
  
  /**
   * إرسال إشعار عند اقتراب موعد المتابعة
   */
  static async notifyFollowUpDue(followUp) {
    try {
      const dueNotification = {
        type: 'followUpDue',
        title: '⏰ متابعة مستحقة الآن',
        message: `حان موعد المتابعة: ${followUp.title}`,
        employeeId: followUp.assignedTo,
        followUpId: followUp.id,
        scheduledDate: followUp.scheduledDate,
        priority: 'urgent'
      };
      
      notificationEmitter.emit('followUpDue', dueNotification);
      
      console.log(`⏰ Due notification sent for follow-up: ${followUp.id}`);
      
    } catch (error) {
      console.error(`❌ Error sending follow-up due notification:`, error);
    }
  }
  
  /**
   * إرسال إشعار عند تأخر المتابعة
   */
  static async notifyFollowUpOverdue(followUp) {
    try {
      // إشعار الموظف
      const employeeNotification = {
        type: 'followUpOverdue',
        title: '🚨 متابعة متأخرة',
        message: `متابعة متأخرة: ${followUp.title}`,
        employeeId: followUp.assignedTo,
        followUpId: followUp.id,
        scheduledDate: followUp.scheduledDate,
        priority: 'urgent'
      };
      
      notificationEmitter.emit('followUpOverdue', employeeNotification);
      
      // إشعار المدير أيضاً
      const managerNotification = {
        type: 'employeeOverdueFollowUp',
        title: '🚨 موظف لديه متابعة متأخرة',
        message: `متابعة متأخرة للموظف: ${followUp.title}`,
        employeeId: followUp.assignedTo,
        followUpId: followUp.id,
        scheduledDate: followUp.scheduledDate
      };
      
      notificationEmitter.emit('managerNotification', managerNotification);
      
      console.log(`🚨 Overdue notifications sent for follow-up: ${followUp.id}`);
      
    } catch (error) {
      console.error(`❌ Error sending follow-up overdue notifications:`, error);
    }
  }
  
  /**
   * حذف التذكير المرتبط بالمتابعة عند حذف أو إكمال المتابعة
   */
  static async removeReminderForFollowUp(followUpId) {
    try {
      // تم تعطيل هذه الوظيفة مؤقتاً بسبب عدم وجود أعمدة related_type و related_id
      // في جدول simple_reminders
      console.log(`⚠️ Skipping reminder removal for follow-up ${followUpId} - feature disabled`);
      return 0;
      
    } catch (error) {
      console.error(`❌ Error removing reminders for follow-up ${followUpId}:`, error);
      return 0;
    }
  }
  
  /**
   * فحص المتابعات المستحقة والمتأخرة (يتم استدعاؤها من cron job)
   */
  static async checkFollowUpsDueAndOverdue() {
    try {
      console.log('🔍 Checking due and overdue follow-ups...');
      
      const now = new Date();
      const fifteenMinutesAgo = new Date(now.getTime() - 15 * 60 * 1000);
      const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);
      
      // المتابعات المستحقة الآن (في آخر 15 دقيقة)
      const dueFollowUps = await FollowUp.findAll({
        where: {
          status: 'scheduled',
          scheduledDate: {
            [require('sequelize').Op.between]: [fifteenMinutesAgo, now]
          }
        }
      });
      
      // المتابعات المتأخرة (أكثر من ساعة)
      const overdueFollowUps = await FollowUp.findAll({
        where: {
          status: 'scheduled',
          scheduledDate: {
            [require('sequelize').Op.lt]: oneHourAgo
          }
        }
      });
      
      // إرسال إشعارات المتابعات المستحقة
      for (const followUp of dueFollowUps) {
        await this.notifyFollowUpDue(followUp);
      }
      
      // إرسال إشعارات المتابعات المتأخرة
      for (const followUp of overdueFollowUps) {
        await this.notifyFollowUpOverdue(followUp);
      }
      
      console.log(`✅ Processed ${dueFollowUps.length} due and ${overdueFollowUps.length} overdue follow-ups`);
      
      return {
        due: dueFollowUps.length,
        overdue: overdueFollowUps.length
      };
      
    } catch (error) {
      console.error('❌ Error checking due and overdue follow-ups:', error);
      return { due: 0, overdue: 0 };
    }
  }
  
  // Helper methods
  static getFollowUpTypeArabic(type) {
    const types = {
      'call': 'مكالمة هاتفية',
      'email': 'بريد إلكتروني', 
      'meeting': 'اجتماع',
      'demo': 'عرض تقديمي',
      'whatsapp': 'واتساب',
      'visit': 'زيارة'
    };
    return types[type] || type;
  }
  
  static getPriorityArabic(priority) {
    const priorities = {
      'low': 'منخفضة',
      'medium': 'متوسطة',
      'high': 'عالية',
      'urgent': 'عاجلة'
    };
    return priorities[priority] || priority;
  }
}

module.exports = FollowUpIntegrationService;


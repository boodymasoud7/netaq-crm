const { FollowUp, Lead, Client } = require('../../models');
const FollowUpIntegrationService = require('./followUpIntegrationService');

/**
 * خدمة المتابعات الذكية
 * تدير المتابعات بناءً على نتائج التفاعل مع العملاء
 */
class SmartFollowUpService {

  /**
   * إنشاء متابعة تالية ذكية بناءً على نتيجة المتابعة السابقة
   */
  static async createSmartNextFollowUp(completedFollowUpId, outcome) {
    try {
      console.log(`🧠 Creating smart next follow-up after completion of: ${completedFollowUpId} with outcome: ${outcome}`);
      
      const completedFollowUp = await FollowUp.findByPk(completedFollowUpId, {
        include: [
          {
            model: Lead,
            as: 'lead',
            attributes: ['id', 'name', 'status']
          },
          {
            model: Client,
            as: 'client',
            attributes: ['id', 'name', 'status']
          }
        ]
      });
      
      if (!completedFollowUp) {
        throw new Error(`Completed follow-up not found: ${completedFollowUpId}`);
      }
      
      // تحديد ما إذا كان يجب إنشاء متابعة تالية حسب النتيجة
      const shouldCreateNext = this.shouldCreateNextFollowUp(outcome);
      if (!shouldCreateNext.create) {
        console.log(`⏸️ No next follow-up needed: ${shouldCreateNext.reason}`);
        
        // تحديث حالة العميل حسب النتيجة
        await this.updateLeadStatusByOutcome(completedFollowUp.leadId, outcome);
        
        return { 
          created: false, 
          reason: shouldCreateNext.reason,
          leadStatusUpdated: true 
        };
      }
      
      const leadName = completedFollowUp.lead?.name || 'العميل';
      const nextFollowUpData = this.getNextFollowUpByOutcome(outcome, leadName);
      
      const nextDate = new Date();
      nextDate.setDate(nextDate.getDate() + nextFollowUpData.daysAfter);
      
      const nextFollowUp = await FollowUp.create({
        leadId: completedFollowUp.leadId,
        clientId: completedFollowUp.clientId,
        saleId: completedFollowUp.saleId,
        type: nextFollowUpData.type,
        title: nextFollowUpData.title,
        description: nextFollowUpData.description,
        scheduledDate: nextDate,
        priority: nextFollowUpData.priority,
        assignedTo: completedFollowUp.assignedTo,
        createdBy: completedFollowUp.assignedTo,
        contactMethod: nextFollowUpData.contactMethod,
        expectedOutcome: nextFollowUpData.expectedOutcome,
        isAutoGenerated: true,
        notes: `متابعة ذكية بناءً على النتيجة: ${outcome}`
      });
      
      // إنشاء تذكير للمتابعة الجديدة
      try {
        await FollowUpIntegrationService.createReminderForFollowUp(nextFollowUp);
      } catch (error) {
        console.error('⚠️ Failed to create reminder for next follow-up:', error);
      }
      
      // تحديث حالة العميل حسب النتيجة
      await this.updateLeadStatusByOutcome(completedFollowUp.leadId, outcome);
      
      console.log(`✅ Smart next follow-up created: ${nextFollowUp.id} - ${nextFollowUp.title}`);
      return { 
        created: true, 
        followUp: nextFollowUp,
        leadStatusUpdated: true 
      };
      
    } catch (error) {
      console.error(`❌ Error creating smart next follow-up:`, error);
      throw error;
    }
  }
  
  /**
   * تحديد ما إذا كان يجب إنشاء متابعة تالية
   */
  static shouldCreateNextFollowUp(outcome) {
    const outcomeActions = {
      'مهتم': { create: true, reason: 'العميل مهتم - يستحق متابعة' },
      'مهتم جداً': { create: true, reason: 'العميل مهتم جداً - يحتاج متابعة سريعة' },
      'يحتاج وقت': { create: true, reason: 'العميل يحتاج وقت - متابعة بعد فترة' },
      'طلب عرض سعر': { create: true, reason: 'العميل طلب عرض سعر - متابعة هامة' },
      'يريد اجتماع': { create: true, reason: 'العميل يريد اجتماع - جدولة عرض تقديمي' },
      'يريد معلومات أكثر': { create: true, reason: 'العميل يحتاج معلومات إضافية' },
      'سيتصل لاحقاً': { create: true, reason: 'العميل وعد بالاتصال - متابعة للتأكد' },
      
      // حالات لا تستحق متابعة
      'غير مهتم': { create: false, reason: 'العميل غير مهتم - توقف المتابعة' },
      'غير مهتم نهائياً': { create: false, reason: 'العميل رفض نهائياً - توقف المتابعة' },
      'رقم خطأ': { create: false, reason: 'رقم خطأ - لا توجد إمكانية للمتابعة' },
      'محول': { create: false, reason: 'تم تحويل العميل - لا حاجة لمتابعة' },
      'مكتمل': { create: false, reason: 'تمت الصفقة - لا حاجة لمتابعة' },
      'عميل حالي': { create: false, reason: 'أصبح عميل - انتقل لمتابعة العملاء' },
      
      // حالات خاصة
      'لا يرد': { create: true, reason: 'العميل لا يرد - محاولة أخيرة بعد فترة' },
      'مشغول': { create: true, reason: 'العميل مشغول - معاودة الاتصال' },
      'في اجتماع': { create: true, reason: 'العميل في اجتماع - إعادة المحاولة' }
    };
    
    return outcomeActions[outcome] || { create: true, reason: 'متابعة افتراضية' };
  }
  
  /**
   * تحديد نوع المتابعة التالية حسب النتيجة
   */
  static getNextFollowUpByOutcome(outcome, leadName) {
    const outcomeMapping = {
      'مهتم': {
        type: 'call',
        title: `متابعة ثانية - ${leadName}`,
        description: 'متابعة للتأكد من الاهتمام وتقديم معلومات إضافية حول الخدمات',
        daysAfter: 2,
        priority: 'medium',
        contactMethod: 'phone',
        expectedOutcome: 'تحديد احتياجات أكثر تفصيلاً وجدولة عرض تقديمي'
      },
      
      'مهتم جداً': {
        type: 'demo',
        title: `عرض تقديمي عاجل - ${leadName}`,
        description: 'العميل مهتم جداً - عرض تقديمي سريع لاستغلال الحماس',
        daysAfter: 2,
        priority: 'urgent',
        contactMethod: 'video_call',
        expectedOutcome: 'إقناع العميل وإرسال عرض سعر فوري'
      },
      
      'يحتاج وقت': {
        type: 'call',
        title: `متابعة دورية - ${leadName}`,
        description: 'العميل محتاج وقت للتفكير - متابعة بعد فترة كافية للقرار',
        daysAfter: 7,
        priority: 'low',
        contactMethod: 'phone',
        expectedOutcome: 'معرفة القرار النهائي أو تحديث الوضع'
      },
      
      'طلب عرض سعر': {
        type: 'email',
        title: `متابعة عرض السعر - ${leadName}`,
        description: 'متابعة بعد إرسال عرض السعر للتأكد من الاستلام ومناقشة التفاصيل',
        daysAfter: 2,
        priority: 'high',
        contactMethod: 'email',
        expectedOutcome: 'مناقشة عرض السعر والإجابة على الاستفسارات'
      },
      
      'يريد اجتماع': {
        type: 'meeting',
        title: `اجتماع مع ${leadName}`,
        description: 'جدولة اجتماع أو عرض تقديمي حسب طلب العميل',
        daysAfter: 2,
        priority: 'urgent',
        contactMethod: 'meeting',
        expectedOutcome: 'عرض تقديمي مفصل وإغلاق الصفقة'
      },
      
      'يريد معلومات أكثر': {
        type: 'email',
        title: `إرسال معلومات إضافية - ${leadName}`,
        description: 'إرسال معلومات تفصيلية أكثر عن الخدمات حسب اهتمام العميل',
        daysAfter: 2,
        priority: 'medium',
        contactMethod: 'email',
        expectedOutcome: 'تقديم المعلومات المطلوبة وجدولة مكالمة متابعة'
      },
      
      'سيتصل لاحقاً': {
        type: 'call',
        title: `متابعة وعد الاتصال - ${leadName}`,
        description: 'العميل وعد بالاتصال لاحقاً - متابعة للتأكد من عدم النسيان',
        daysAfter: 5,
        priority: 'medium',
        contactMethod: 'phone',
        expectedOutcome: 'التأكد من استمرار الاهتمام وتحديد الخطوات التالية'
      },
      
      'لا يرد': {
        type: 'call',
        title: `محاولة أخيرة - ${leadName}`,
        description: 'محاولة أخيرة للتواصل مع العميل قبل إيقاف المتابعة نهائياً',
        daysAfter: 7,
        priority: 'low',
        contactMethod: 'phone',
        expectedOutcome: 'التأكد من استمرار الاهتمام أو إغلاق الملف'
      },
      
      'مشغول': {
        type: 'call',
        title: `إعادة اتصال - ${leadName}`,
        description: 'العميل كان مشغولاً - إعادة المحاولة في وقت مناسب',
        daysAfter: 2,
        priority: 'medium',
        contactMethod: 'phone',
        expectedOutcome: 'التواصل الفعال مع العميل والحصول على رد واضح'
      },
      
      'في اجتماع': {
        type: 'call',
        title: `إعادة اتصال - ${leadName}`,
        description: 'العميل كان في اجتماع - إعادة المحاولة في وقت أفضل',
        daysAfter: 2,
        priority: 'medium',
        contactMethod: 'phone',
        expectedOutcome: 'التواصل مع العميل خارج أوقات الاجتماعات'
      }
    };
    
    // إذا لم تكن النتيجة معروفة، استخدم متابعة افتراضية
    return outcomeMapping[outcome] || {
      type: 'call',
      title: `متابعة دورية - ${leadName}`,
      description: 'متابعة دورية للتأكد من التقدم وتحديث الوضع',
      daysAfter: 5,
      priority: 'medium',
      contactMethod: 'phone',
      expectedOutcome: 'تحديث حالة العميل وتحديد الخطوات التالية'
    };
  }
  
  /**
   * تحديث حالة العميل المحتمل بناءً على نتيجة المتابعة
   */
  static async updateLeadStatusByOutcome(leadId, outcome) {
    try {
      const lead = await Lead.findByPk(leadId);
      if (!lead) return;
      
      const statusMapping = {
        'مهتم': 'interested',
        'مهتم جداً': 'qualified',
        'طلب عرض سعر': 'qualified',
        'يريد اجتماع': 'qualified',
        'غير مهتم': 'not_interested',
        'غير مهتم نهائياً': 'lost',
        'محول': 'converted',
        'مكتمل': 'converted',
        'عميل حالي': 'converted',
        'رقم خطأ': 'lost'
      };
      
      const newStatus = statusMapping[outcome];
      if (newStatus && newStatus !== lead.status) {
        await lead.update({ status: newStatus });
        console.log(`📊 Lead ${leadId} status updated to: ${newStatus} (outcome: ${outcome})`);
      }
      
    } catch (error) {
      console.error(`❌ Error updating lead status:`, error);
    }
  }
  
  /**
   * الحصول على قائمة النتائج الممكنة للمتابعات
   */
  static getAvailableOutcomes() {
    return [
      { value: 'مهتم', label: '😊 مهتم', color: 'green' },
      { value: 'مهتم جداً', label: '🤩 مهتم جداً', color: 'emerald' },
      { value: 'يحتاج وقت', label: '⏳ يحتاج وقت', color: 'yellow' },
      { value: 'طلب عرض سعر', label: '💰 طلب عرض سعر', color: 'blue' },
      { value: 'يريد اجتماع', label: '🤝 يريد اجتماع', color: 'purple' },
      { value: 'يريد معلومات أكثر', label: '📋 يريد معلومات أكثر', color: 'indigo' },
      { value: 'سيتصل لاحقاً', label: '📞 سيتصل لاحقاً', color: 'cyan' },
      { value: 'مشغول', label: '⏰ مشغول', color: 'orange' },
      { value: 'في اجتماع', label: '👥 في اجتماع', color: 'orange' },
      { value: 'لا يرد', label: '📵 لا يرد', color: 'gray' },
      { value: 'غير مهتم', label: '😐 غير مهتم', color: 'red' },
      { value: 'غير مهتم نهائياً', label: '❌ غير مهتم نهائياً', color: 'red' },
      { value: 'رقم خطأ', label: '📱 رقم خطأ', color: 'red' },
      { value: 'محول', label: '✅ محول لعميل', color: 'green' },
      { value: 'مكتمل', label: '🎉 مكتمل', color: 'green' }
    ];
  }
}

module.exports = SmartFollowUpService;

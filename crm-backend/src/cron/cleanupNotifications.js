const cron = require('node-cron');
const { Notification } = require('../../models');
const { Op } = require('sequelize');

// ุฅุนุฏุงุฏุงุช ุงูุชูุธูู
const CLEANUP_CONFIG = {
  // ุชุดุบูู ูู ููู ุงูุณุงุนุฉ 3 ุตุจุงุญุงู
  cronPattern: '0 3 * * *',
  // ุญุฐู ุงูุฅุดุนุงุฑุงุช ุงูุฃูุฏู ูู 30 ููู
  retentionDays: 30,
  // ุงูุงุญุชูุงุธ ุจุญุฏ ุฃูุตู 10000 ุฅุดุนุงุฑ
  maxNotifications: 10000,
  // ุญุฐู ุงูุฅุดุนุงุฑุงุช ุงูููุฑูุกุฉ ุงูุฃูุฏู ูู 7 ุฃูุงู
  readRetentionDays: 7
};

// ุฏุงูุฉ ุชูุธูู ุงูุฅุดุนุงุฑุงุช ุงููุฏููุฉ
async function cleanupOldNotifications() {
  try {
    console.log('๐งน ุจุฏุก ุชูุธูู ุงูุฅุดุนุงุฑุงุช ุงููุฏููุฉ...');
    
    const now = new Date();
    const retentionDate = new Date(now - CLEANUP_CONFIG.retentionDays * 24 * 60 * 60 * 1000);
    const readRetentionDate = new Date(now - CLEANUP_CONFIG.readRetentionDays * 24 * 60 * 60 * 1000);
    
    // 1. ุญุฐู ุงูุฅุดุนุงุฑุงุช ุงููุฏููุฉ ุฌุฏุงู (ุฃูุฏู ูู 30 ููู)
    const deletedOld = await Notification.destroy({
      where: {
        createdAt: {
          [Op.lt]: retentionDate
        }
      }
    });
    
    // 2. ุญุฐู ุงูุฅุดุนุงุฑุงุช ุงูููุฑูุกุฉ ุงููุฏููุฉ (ุฃูุฏู ูู 7 ุฃูุงู)
    const deletedRead = await Notification.destroy({
      where: {
        isRead: true,
        createdAt: {
          [Op.lt]: readRetentionDate
        }
      }
    });
    
    // 3. ุงูุชุญูู ูู ุงูุนุฏุฏ ุงูุฅุฌูุงูู
    const totalCount = await Notification.count();
    
    // 4. ุฅุฐุง ุชุฌุงูุฒ ุงูุญุฏ ุงูุฃูุตูุ ุงุญุฐู ุงูุฃูุฏู
    if (totalCount > CLEANUP_CONFIG.maxNotifications) {
      const excessCount = totalCount - CLEANUP_CONFIG.maxNotifications;
      
      // ุฌูุจ IDs ุงูุฃูุฏู
      const oldestNotifications = await Notification.findAll({
        attributes: ['id'],
        order: [['createdAt', 'ASC']],
        limit: excessCount
      });
      
      const idsToDelete = oldestNotifications.map(n => n.id);
      
      const deletedExcess = await Notification.destroy({
        where: {
          id: {
            [Op.in]: idsToDelete
          }
        }
      });
      
      console.log(`๐๏ธ ุชู ุญุฐู ${deletedExcess} ุฅุดุนุงุฑ ุฒุงุฆุฏ ุนู ุงูุญุฏ ุงูุฃูุตู`);
    }
    
    // ุฅุญุตุงุฆูุงุช ุงูุชูุธูู
    const remainingCount = await Notification.count();
    
    console.log('โ ุงูุชูู ุชูุธูู ุงูุฅุดุนุงุฑุงุช:');
    console.log(`   ๐ ุญุฐู ${deletedOld} ุฅุดุนุงุฑ ูุฏูู (ุฃูุฏู ูู ${CLEANUP_CONFIG.retentionDays} ููู)`);
    console.log(`   ๐ ุญุฐู ${deletedRead} ุฅุดุนุงุฑ ููุฑูุก ูุฏูู (ุฃูุฏู ูู ${CLEANUP_CONFIG.readRetentionDays} ุฃูุงู)`);
    console.log(`   ๐ ุงูุนุฏุฏ ุงููุชุจูู: ${remainingCount} ุฅุดุนุงุฑ`);
    
    return {
      deletedOld,
      deletedRead,
      remainingCount
    };
    
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุชูุธูู ุงูุฅุดุนุงุฑุงุช:', error);
    throw error;
  }
}

// ุฏุงูุฉ ูุจุฏุก ุชุดุบูู cron job
function startNotificationCleanupJob() {
  if (!cron.validate(CLEANUP_CONFIG.cronPattern)) {
    console.error('โ ููุท cron ุบูุฑ ุตุญูุญ:', CLEANUP_CONFIG.cronPattern);
    return false;
  }

  console.log('๐ ุจุฏุก ุชุดุบูู ุฎุฏูุฉ ุชูุธูู ุงูุฅุดุนุงุฑุงุช...');
  console.log(`โฐ ููุท ุงููุญุต: ${CLEANUP_CONFIG.cronPattern} (ูู ููู ุงูุณุงุนุฉ 3 ุตุจุงุญุงู)`);
  console.log(`๐ ุงูุงุญุชูุงุธ ุจุงูุฅุดุนุงุฑุงุช ููุฏุฉ ${CLEANUP_CONFIG.retentionDays} ููู`);
  console.log(`๐ ุญุฐู ุงูููุฑูุกุฉ ุจุนุฏ ${CLEANUP_CONFIG.readRetentionDays} ุฃูุงู`);
  console.log(`๐ ุงูุญุฏ ุงูุฃูุตู: ${CLEANUP_CONFIG.maxNotifications} ุฅุดุนุงุฑ`);
  
  const task = cron.schedule(CLEANUP_CONFIG.cronPattern, async () => {
    await cleanupOldNotifications();
  }, {
    scheduled: true,
    timezone: "Africa/Cairo"
  });

  console.log('โ ุฎุฏูุฉ ุชูุธูู ุงูุฅุดุนุงุฑุงุช ุชุนูู ุจูุฌุงุญ');
  return task;
}

// ุฏุงูุฉ ูุฅููุงู cron job
function stopNotificationCleanupJob(task) {
  if (task) {
    task.stop();
    console.log('โน๏ธ ุชู ุฅููุงู ุฎุฏูุฉ ุชูุธูู ุงูุฅุดุนุงุฑุงุช');
  }
}

module.exports = {
  startNotificationCleanupJob,
  stopNotificationCleanupJob,
  cleanupOldNotifications,
  CLEANUP_CONFIG
};


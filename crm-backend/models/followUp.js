'use strict';
const { Model } = require('sequelize');

module.exports = (sequelize, DataTypes) => {
  class FollowUp extends Model {
    static associate(models) {
      // العلاقات مع الجداول الأخرى
      if (models.Lead) {
        FollowUp.belongsTo(models.Lead, {
          foreignKey: 'leadId',
          as: 'lead'
        });
      }
      
      if (models.Client) {
        FollowUp.belongsTo(models.Client, {
          foreignKey: 'clientId',
          as: 'client'
        });
      }
      
      if (models.Sale) {
        FollowUp.belongsTo(models.Sale, {
          foreignKey: 'saleId',
          as: 'sale'
        });
      }
      
      if (models.User) {
        FollowUp.belongsTo(models.User, {
          foreignKey: 'assignedTo',
          as: 'assignedUser'
        });
        
        FollowUp.belongsTo(models.User, {
          foreignKey: 'createdBy',
          as: 'creator'
        });
      }
    }

    // Helper methods
    isOverdue() {
      if (this.status === 'completed') return false;
      return new Date(this.scheduledDate) < new Date();
    }

    isToday() {
      const today = new Date();
      const scheduledDate = new Date(this.scheduledDate);
      return today.toDateString() === scheduledDate.toDateString();
    }

    getRelatedEntity() {
      if (this.lead) return { type: 'lead', data: this.lead };
      if (this.client) return { type: 'client', data: this.client };
      if (this.sale) return { type: 'sale', data: this.sale };
      return null;
    }

    // إنشاء متابعة تلقائية
    static async createAutoFollowUp(entityType, entityId, options = {}) {
      const {
        daysAfter = 3,
        type = 'call',
        priority = 'medium',
        title,
        description,
        assignedTo
      } = options;

      const scheduledDate = new Date();
      scheduledDate.setDate(scheduledDate.getDate() + daysAfter);

      return await FollowUp.create({
        [`${entityType}Id`]: entityId,
        type,
        priority,
        title: title || `متابعة تلقائية - ${entityType}`,
        description: description || `متابعة تلقائية تم إنشاؤها بعد ${daysAfter} أيام`,
        scheduledDate,
        assignedTo,
        createdBy: assignedTo,
        isAutoGenerated: true
      });
    }
  }

  FollowUp.init({
    id: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      autoIncrement: true
    },
    leadId: {
      type: DataTypes.INTEGER,
      allowNull: true,
      field: 'lead_id'
    },
    clientId: {
      type: DataTypes.INTEGER,
      allowNull: true,
      field: 'client_id'
    },
    saleId: {
      type: DataTypes.INTEGER,
      allowNull: true,
      field: 'sale_id'
    },
    type: {
      type: DataTypes.ENUM('call', 'email', 'meeting', 'demo', 'whatsapp', 'visit'),
      allowNull: false,
      defaultValue: 'call',
      validate: {
        isIn: [['call', 'email', 'meeting', 'demo', 'whatsapp', 'visit']]
      }
    },
    status: {
      type: DataTypes.ENUM('pending', 'done', 'cancelled'),
      allowNull: false,
      defaultValue: 'pending'
    },
    priority: {
      type: DataTypes.ENUM('low', 'medium', 'high', 'urgent'),
      allowNull: false,
      defaultValue: 'medium',
      validate: {
        isIn: [['low', 'medium', 'high', 'urgent']]
      }
    },
    title: {
      type: DataTypes.STRING(200),
      allowNull: false,
      validate: {
        notEmpty: true,
        len: [1, 200]
      }
    },
    description: {
      type: DataTypes.TEXT,
      allowNull: true
    },
    notes: {
      type: DataTypes.TEXT,
      allowNull: true
    },
    scheduledDate: {
      type: DataTypes.DATE,
      allowNull: false,
      field: 'scheduled_date',
      validate: {
        isDate: true,
        isAfter: '2024-01-01'
      }
    },
    completedDate: {
      type: DataTypes.DATE,
      allowNull: true,
      field: 'completed_date',
      validate: {
        isDate: true
      }
    },
    assignedTo: {
      type: DataTypes.INTEGER,
      allowNull: true,
      field: 'assigned_to'
    },
    createdBy: {
      type: DataTypes.INTEGER,
      allowNull: true,
      field: 'created_by'
    },
    contactMethod: {
      type: DataTypes.ENUM('phone', 'whatsapp', 'email', 'in_person', 'video_call'),
      allowNull: true,
      field: 'contact_method',
      validate: {
        isIn: [['phone', 'whatsapp', 'email', 'in_person', 'video_call']]
      }
    },
    expectedOutcome: {
      type: DataTypes.TEXT,
      allowNull: true,
      field: 'expected_outcome'
    },
    actualOutcome: {
      type: DataTypes.TEXT,
      allowNull: true,
      field: 'actual_outcome'
    },
    nextAction: {
      type: DataTypes.TEXT,
      allowNull: true,
      field: 'next_action'
    },
    isAutoGenerated: {
      type: DataTypes.BOOLEAN,
      allowNull: false,
      defaultValue: false,
      field: 'is_auto_generated'
    }
  }, {
    sequelize,
    modelName: 'FollowUp',
    tableName: 'FollowUps',
    timestamps: true,
    paranoid: true, // Soft delete
    createdAt: 'created_at',
    updatedAt: 'updated_at',
    deletedAt: 'deleted_at',
    indexes: [
      {
        fields: ['scheduled_date']
      },
      {
        fields: ['status']
      },
      {
        fields: ['assigned_to']
      },
      {
        fields: ['type']
      },
      {
        fields: ['priority']
      },
      {
        fields: ['is_auto_generated']
      }
    ]
  });

  return FollowUp;
};

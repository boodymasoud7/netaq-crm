/**
 * لوحة تحكم المتابعات التلقائية
 * Auto Follow-up Dashboard Component
 */

import React, { useState, useEffect } from 'react'
import { 
  Calendar, 
  Clock, 
  Users, 
  Target, 
  BarChart3, 
  Zap,
  PlayCircle,
  PauseCircle,
  Settings,
  RefreshCw,
  TrendingUp,
  AlertCircle
} from 'lucide-react'
import { Card, CardContent, CardHeader, CardTitle } from '../ui/card'
import { Button } from '../ui/button'
import { Badge } from '../ui/badge'
import { useAutoFollowUp } from '../../hooks/useAutoFollowUp'
import { useApi } from '../../hooks/useApi'
import toast from 'react-hot-toast'

const AutoFollowUpDashboard = () => {
  const { isProcessing, schedulePeriodicFollowUps, calculateWorkload } = useAutoFollowUp()
  const { api } = useApi()
  
  const [stats, setStats] = useState({
    totalAutoFollowUps: 0,
    completedToday: 0,
    pendingFollowUps: 0,
    overdueFollowUps: 0,
    averageResponseTime: 0,
    conversionRate: 0
  })
  
  const [employeeWorkloads, setEmployeeWorkloads] = useState([])
  const [autoSystemEnabled, setAutoSystemEnabled] = useState(true)
  const [lastUpdate, setLastUpdate] = useState(new Date())

  // جلب إحصائيات النظام
  const fetchSystemStats = async () => {
    try {
      // جلب إحصائيات المتابعات التلقائية
      const followUpsResponse = await api.followUpsAPI.getFollowUps({
        isAutoGenerated: true,
        limit: 1000
      })
      
      if (followUpsResponse.success) {
        const autoFollowUps = followUpsResponse.data || []
        const today = new Date().toDateString()
        
        const newStats = {
          totalAutoFollowUps: autoFollowUps.length,
          completedToday: autoFollowUps.filter(f => 
            f.status === 'completed' && 
            new Date(f.completedAt).toDateString() === today
          ).length,
          pendingFollowUps: autoFollowUps.filter(f => f.status === 'scheduled').length,
          overdueFollowUps: autoFollowUps.filter(f => 
            f.status === 'scheduled' && 
            new Date(f.scheduledDate) < new Date()
          ).length,
          averageResponseTime: calculateAverageResponseTime(autoFollowUps),
          conversionRate: calculateConversionRate(autoFollowUps)
        }
        
        setStats(newStats)
      }
      
      // جلب أعباء العمل للموظفين
      const usersResponse = await api.dbAPI.getUsers({ role: 'sales' })
      if (usersResponse.success) {
        const workloads = await Promise.all(
          (usersResponse.data || []).map(async (user) => {
            const workload = await calculateWorkload(user.id)
            return {
              ...user,
              workload: workload.success ? workload.data : { totalWorkload: 0 }
            }
          })
        )
        setEmployeeWorkloads(workloads)
      }
      
      setLastUpdate(new Date())
      
    } catch (error) {
      console.error('Error fetching system stats:', error)
      toast.error('فشل في جلب إحصائيات النظام')
    }
  }

  // حساب متوسط وقت الاستجابة
  const calculateAverageResponseTime = (followUps) => {
    const completedFollowUps = followUps.filter(f => f.status === 'completed')
    if (completedFollowUps.length === 0) return 0
    
    const totalTime = completedFollowUps.reduce((sum, f) => {
      const created = new Date(f.createdAt)
      const completed = new Date(f.completedAt)
      return sum + (completed - created)
    }, 0)
    
    return Math.round(totalTime / completedFollowUps.length / (1000 * 60 * 60)) // hours
  }

  // حساب معدل التحويل
  const calculateConversionRate = (followUps) => {
    const totalFollowUps = followUps.length
    if (totalFollowUps === 0) return 0
    
    const convertedFollowUps = followUps.filter(f => 
      f.leadId && f.lead?.status === 'converted'
    ).length
    
    return Math.round((convertedFollowUps / totalFollowUps) * 100)
  }

  // تشغيل المتابعات الدورية
  const handleRunPeriodicFollowUps = async () => {
    const result = await schedulePeriodicFollowUps()
    if (result.success) {
      fetchSystemStats()
    }
  }

  useEffect(() => {
    fetchSystemStats()
    
    // تحديث تلقائي كل 5 دقائق
    const interval = setInterval(fetchSystemStats, 5 * 60 * 1000)
    return () => clearInterval(interval)
  }, [])

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">لوحة تحكم المتابعات التلقائية</h2>
          <p className="text-gray-600">إدارة ومراقبة النظام التلقائي للمتابعات</p>
        </div>
        
        <div className="flex items-center gap-3">
          <Badge 
            variant={autoSystemEnabled ? "default" : "secondary"}
            className={autoSystemEnabled ? "bg-green-500" : "bg-gray-500"}
          >
            {autoSystemEnabled ? "مفعل" : "متوقف"}
          </Badge>
          
          <Button 
            onClick={fetchSystemStats}
            variant="outline"
            size="sm"
            disabled={isProcessing}
          >
            <RefreshCw className={`w-4 h-4 mr-2 ${isProcessing ? 'animate-spin' : ''}`} />
            تحديث
          </Button>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">المتابعات التلقائية</p>
                <p className="text-2xl font-bold text-gray-900">{stats.totalAutoFollowUps}</p>
              </div>
              <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                <Zap className="w-4 h-4 text-blue-600" />
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">مكتملة اليوم</p>
                <p className="text-2xl font-bold text-green-600">{stats.completedToday}</p>
              </div>
              <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
                <TrendingUp className="w-4 h-4 text-green-600" />
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">قيد الانتظار</p>
                <p className="text-2xl font-bold text-yellow-600">{stats.pendingFollowUps}</p>
              </div>
              <div className="w-8 h-8 bg-yellow-100 rounded-full flex items-center justify-center">
                <Clock className="w-4 h-4 text-yellow-600" />
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">متأخرة</p>
                <p className="text-2xl font-bold text-red-600">{stats.overdueFollowUps}</p>
              </div>
              <div className="w-8 h-8 bg-red-100 rounded-full flex items-center justify-center">
                <AlertCircle className="w-4 h-4 text-red-600" />
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Performance Metrics */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <BarChart3 className="w-5 h-5" />
              مقاييس الأداء
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex items-center justify-between">
              <span className="text-sm text-gray-600">متوسط وقت الاستجابة</span>
              <span className="font-semibold">{stats.averageResponseTime} ساعة</span>
            </div>
            
            <div className="flex items-center justify-between">
              <span className="text-sm text-gray-600">معدل التحويل</span>
              <span className="font-semibold text-green-600">{stats.conversionRate}%</span>
            </div>
            
            <div className="flex items-center justify-between">
              <span className="text-sm text-gray-600">آخر تحديث</span>
              <span className="text-sm text-gray-500">
                {lastUpdate.toLocaleTimeString('ar-EG')}
              </span>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Users className="w-5 h-5" />
              أعباء العمل للموظفين
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {employeeWorkloads.slice(0, 5).map((employee) => (
                <div key={employee.id} className="flex items-center justify-between">
                  <span className="text-sm font-medium">{employee.name}</span>
                  <div className="flex items-center gap-2">
                    <span className="text-sm text-gray-600">
                      {employee.workload?.totalWorkload || 0}
                    </span>
                    <div 
                      className={`w-2 h-2 rounded-full ${
                        (employee.workload?.totalWorkload || 0) > 20 ? 'bg-red-500' :
                        (employee.workload?.totalWorkload || 0) > 10 ? 'bg-yellow-500' : 'bg-green-500'
                      }`}
                    />
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Actions */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Settings className="w-5 h-5" />
            إجراءات النظام
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex flex-wrap gap-3">
            <Button 
              onClick={handleRunPeriodicFollowUps}
              disabled={isProcessing}
              className="flex items-center gap-2"
            >
              <PlayCircle className="w-4 h-4" />
              تشغيل المتابعات الدورية
            </Button>
            
            <Button 
              variant="outline"
              onClick={() => setAutoSystemEnabled(!autoSystemEnabled)}
              className="flex items-center gap-2"
            >
              {autoSystemEnabled ? (
                <>
                  <PauseCircle className="w-4 h-4" />
                  إيقاف النظام
                </>
              ) : (
                <>
                  <PlayCircle className="w-4 h-4" />
                  تفعيل النظام
                </>
              )}
            </Button>
            
            <Button 
              variant="outline"
              onClick={fetchSystemStats}
              disabled={isProcessing}
              className="flex items-center gap-2"
            >
              <Target className="w-4 h-4" />
              إعادة حساب الإحصائيات
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

export default AutoFollowUpDashboard




